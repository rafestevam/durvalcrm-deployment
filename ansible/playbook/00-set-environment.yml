---
- name: Setup DurvalCRM Development Environment on Rocky Linux 9
  hosts: vm-dev
  become: yes
  vars:
    postgresql_version: "15"
    postgresql_user: "durvalcrm_dev"
    postgresql_password: "durvalcrm@123"
    postgresql_db: "durvalcrm_db"
    keycloak_version: "26.0.7"
    keycloak_admin_user: "admin"
    keycloak_admin_password: "admin"
    # Conditional ports based on environment
    keycloak_http_port: "8090"
    keycloak_https_port: "{{ '8090' if \"vm-dev\" in group_names else '9443' }}"
    wildfly_version: "37.0.0.Final"
    wildfly_http_port: "8080"
    wildfly_https_port: "{{ '8080' if \"vm-dev\" in group_names else '8443' }}"
    nginx_port: "{{ '9080' if \"vm-dev\" in group_names else '80' }}"
    use_https: "{{ \"vm-dev\" not in group_names }}"
    java_version: "17"

  tasks:
    # System information and preparation for Rocky Linux 9
    - name: Display system information and validate Rocky Linux 9
      debug:
        msg: |
          Operating System: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          Kernel: {{ ansible_kernel }}
          Python Version: {{ ansible_python_version }}
          {% if ansible_distribution == "Rocky" and ansible_distribution_major_version == "9" %}
          ✅ Rocky Linux 9 detected - Playbook optimized for this platform
          {% elif ansible_distribution == "Rocky" %}
          ⚠️ Rocky Linux version {{ ansible_distribution_version }} detected - Playbook optimized for version 9
          {% else %}
          ⚠️ Non-Rocky Linux OS detected ({{ ansible_distribution }}) - Playbook optimized for Rocky Linux 9
          {% endif %}

    - name: Verify Rocky Linux 9 compatibility
      assert:
        that:
          - ansible_os_family == "RedHat"
          - ansible_distribution_major_version|int >= 8
        fail_msg: "This playbook requires Rocky Linux 9 or compatible RHEL-based system"
        success_msg: "System compatibility verified for Rocky Linux deployment"
      ignore_errors: yes

    - name: Install SELinux management tools for Rocky Linux 9
      package:
        name:
          - policycoreutils-python-utils
          - selinux-policy-targeted
          - setroubleshoot-server
        state: present
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Configure SELinux to permissive mode for development
      selinux:
        policy: targeted
        state: permissive
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Set timezone to UTC (recommended for servers)
      timezone:
        name: UTC
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Configure basic system tuning for Rocky Linux 9
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: 'vm.swappiness', value: '10' }
        - { key: 'net.core.somaxconn', value: '65535' }
        - { key: 'net.ipv4.tcp_max_syn_backlog', value: '65535' }
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    # System cleanup and preparation
    - name: Clean existing repository metadata and cache
      shell: |
        dnf clean all || yum clean all
        rm -rf /var/cache/yum/*
        rm -rf /var/cache/dnf/*
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Remove problematic PostgreSQL repositories if they exist
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/yum.repos.d/pgdg-redhat-all.repo
        - /etc/yum.repos.d/pgdg-common.repo
        - /etc/yum.repos.d/pgdg15.repo
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Remove old PostgreSQL GPG keys
      shell: |
        rpm -e --allmatches gpg-pubkey-442df0f8 || true
        rpm -e --allmatches gpg-pubkey-442df0f8-* || true
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Rebuild RPM database
      shell: rpm --rebuilddb
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Update repository metadata after cleanup
      shell: dnf makecache || yum makecache
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    # Java Installation (required for Keycloak and WildFly)
    - name: Install Java {{ java_version }} for Rocky Linux 9
      package:
        name: 
          - "java-{{ java_version }}-openjdk"
          - "java-{{ java_version }}-openjdk-devel"
          - "java-{{ java_version }}-openjdk-headless"
        state: present
      register: java_install_result

    - name: Detect Java installation path for Rocky Linux 9
      shell: |
        if [ -d "/usr/lib/jvm/java-{{ java_version }}-openjdk" ]; then
          echo "/usr/lib/jvm/java-{{ java_version }}-openjdk"
        elif [ -d "/usr/lib/jvm/jre-{{ java_version }}-openjdk" ]; then
          echo "/usr/lib/jvm/jre-{{ java_version }}-openjdk"  
        elif [ -d "/usr/lib/jvm/java-{{ java_version }}" ]; then
          echo "/usr/lib/jvm/java-{{ java_version }}"
        else
          find /usr/lib/jvm -name "*java*{{ java_version }}*openjdk*" -type d | head -1
        fi
      register: java_home_detected
      when: java_install_result.changed or java_install_result.skipped is not defined
      ignore_errors: yes

    - name: Set Java home variable for Rocky Linux 9
      set_fact:
        java_home_path: "{{ java_home_detected.stdout if java_home_detected.stdout is defined and java_home_detected.stdout != '' else '/usr/lib/jvm/java-' + java_version + '-openjdk' }}"

    - name: Display detected Java path
      debug:
        msg: "Java Home detected: {{ java_home_path }}"

    # PostgreSQL 15 Installation and Configuration
    - name: Install EPEL repository (required for some dependencies)
      package:
        name: epel-release
        state: present
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Install additional repositories and tools for Rocky Linux 9
      package:
        name:
          - dnf-plugins-core
          - curl
          - wget
          - tar
          - unzip
          - which
          - net-tools
          - bind-utils
          - vim
          - lsof
          - htop
          - git
        state: present
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Enable Rocky Linux PowerTools repository for additional packages
      shell: dnf config-manager --set-enabled powertools || dnf config-manager --set-enabled crb || true
      when: ansible_os_family == "RedHat" and ansible_distribution == "Rocky"
      ignore_errors: yes

    - name: Update system packages (optional, but recommended for Rocky Linux 9)
      package:
        name: "*"
        state: latest
      when: ansible_os_family == "RedHat"
      ignore_errors: yes
      async: 900
      poll: 30

    - name: Ensure systemd is properly configured for Rocky Linux 9
      shell: |
        systemctl daemon-reload
        systemctl reset-failed
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Clean package cache before PostgreSQL setup
      shell: dnf clean all && dnf makecache || yum clean all && yum makecache
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Install PostgreSQL GPG key for Rocky Linux 9
      rpm_key:
        key: https://download.postgresql.org/pub/repos/yum/keys/PGDG-RPM-GPG-KEY-RHEL
        state: present
      when: ansible_os_family == "RedHat"
      register: pgdg_key_result
      retries: 3
      delay: 5

    - name: Verify distribution major version for repository selection
      debug:
        msg: "Using EL-{{ ansible_distribution_major_version }} repositories"
      when: ansible_os_family == "RedHat"

    - name: Wait for GPG key to be properly imported
      pause:
        seconds: 5
      when: ansible_os_family == "RedHat" and pgdg_key_result.changed

    - name: Install PostgreSQL {{ postgresql_version }} repository
      package:
        name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
        state: present
        disable_gpg_check: no
      when: ansible_os_family == "RedHat"
      register: pgdg_repo_result
      retries: 3
      delay: 10

    - name: Clean repository metadata after PostgreSQL repo installation
      shell: dnf clean all && dnf makecache || yum clean all && yum makecache
      when: ansible_os_family == "RedHat" and pgdg_repo_result.changed
      ignore_errors: yes

    - name: Verify PostgreSQL repository is available
      shell: dnf search postgresql{{ postgresql_version }} || yum search postgresql{{ postgresql_version }}
      register: postgresql_search
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Install PostgreSQL {{ postgresql_version }} packages
      package:
        name:
          - "postgresql{{ postgresql_version }}"
          - "postgresql{{ postgresql_version }}-server"
          - "postgresql{{ postgresql_version }}-contrib"
          - "python3-psycopg2"
        state: present
        disable_gpg_check: no
      register: postgresql_install_result
      retries: 3
      delay: 10
      ignore_errors: yes

    - name: Try alternative PostgreSQL package names if standard ones fail
      package:
        name:
          - "postgresql-{{ postgresql_version }}"
          - "postgresql-{{ postgresql_version }}-server"
          - "postgresql-{{ postgresql_version }}-contrib" 
          - "python3-psycopg2"
        state: present
        disable_gpg_check: no
      when: postgresql_install_result.failed or postgresql_install_result.rc != 0
      register: postgresql_alt_install
      retries: 3
      delay: 10
      ignore_errors: yes

    - name: Install from default repositories if PostgreSQL repo packages fail
      package:
        name:
          - "postgresql"
          - "postgresql-server"
          - "postgresql-contrib"
          - "python3-psycopg2"
        state: present
      when: (postgresql_install_result.failed or postgresql_install_result.rc != 0) and (postgresql_alt_install is not defined or postgresql_alt_install.failed or postgresql_alt_install.rc != 0)
      register: postgresql_default_install
      ignore_errors: yes

    - name: Detect which PostgreSQL installation succeeded
      set_fact:
        postgresql_installed: "{% if postgresql_default_install is defined and postgresql_default_install.changed %}default{% elif postgresql_alt_install is defined and postgresql_alt_install.changed %}alt{% elif postgresql_install_result.changed %}version{% else %}none{% endif %}"

    - name: Set PostgreSQL paths based on installation method
      set_fact:
        postgresql_data_dir: "{% if postgresql_installed == 'default' %}/var/lib/pgsql/data{% else %}/var/lib/pgsql/{{ postgresql_version }}/data{% endif %}"
        postgresql_service_name: "{% if postgresql_installed == 'default' %}postgresql{% else %}postgresql-{{ postgresql_version }}{% endif %}"
        postgresql_bin_dir: "{% if postgresql_installed == 'default' %}/usr/bin{% else %}/usr/pgsql-{{ postgresql_version }}/bin{% endif %}"
        postgres_user_exists: "{% if postgresql_installed != 'none' %}true{% else %}false{% endif %}"

    - name: Create postgres user if PostgreSQL was installed but user doesn't exist
      user:
        name: postgres
        system: yes
        shell: /bin/bash
        home: /var/lib/pgsql
        create_home: yes
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Skip PostgreSQL configuration if not installed
      debug:
        msg: "PostgreSQL installation failed, skipping configuration tasks"
      when: postgresql_installed == 'none'

    - name: Check if PostgreSQL is initialized
      stat:
        path: "{{ postgresql_data_dir }}/PG_VERSION"
      register: pgdata_dir_version
      when: postgresql_installed != 'none'

    - name: Initialize PostgreSQL database (version-specific)
      command: "{{ postgresql_bin_dir }}/postgresql-{{ postgresql_version }}-setup initdb"
      when: postgresql_installed != 'none' and pgdata_dir_version is defined and not pgdata_dir_version.stat.exists and postgresql_service_name != 'postgresql'
      ignore_errors: yes

    - name: Initialize PostgreSQL database (default)
      command: "{{ postgresql_bin_dir }}/postgresql-setup --initdb"
      when: postgresql_installed != 'none' and pgdata_dir_version is defined and not pgdata_dir_version.stat.exists and postgresql_service_name == 'postgresql'
      ignore_errors: yes

    - name: Create PostgreSQL data directory if it doesn't exist
      file:
        path: "{{ postgresql_data_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'
      when: postgresql_installed != 'none' and pgdata_dir_version is defined and not pgdata_dir_version.stat.exists
      ignore_errors: yes

    - name: Alternative PostgreSQL initialization
      shell: "{{ postgresql_bin_dir }}/initdb -D {{ postgresql_data_dir }}"
      become_user: postgres
      when: postgresql_installed != 'none' and pgdata_dir_version is defined and not pgdata_dir_version.stat.exists
      ignore_errors: yes

    - name: Configure PostgreSQL authentication for local connections
      lineinfile:
        path: "{{ postgresql_data_dir }}/pg_hba.conf"
        regexp: "^local\\s+all\\s+all\\s+"
        line: "local   all             all                                     trust"
        backup: yes
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Configure PostgreSQL authentication for postgres user
      lineinfile:
        path: "{{ postgresql_data_dir }}/pg_hba.conf"
        regexp: "^local\\s+all\\s+postgres\\s+"
        line: "local   all             postgres                                trust"
        insertbefore: "^local\\s+all\\s+all"
        backup: yes
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Configure PostgreSQL to listen on all interfaces
      lineinfile:
        path: "{{ postgresql_data_dir }}/postgresql.conf"
        regexp: "^#?listen_addresses"
        line: "listen_addresses = '*'"
        backup: yes
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Start and enable PostgreSQL service
      systemd:
        name: "{{ postgresql_service_name }}"
        state: started
        enabled: yes
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Restart PostgreSQL service to apply configuration changes
      systemd:
        name: "{{ postgresql_service_name }}"
        state: restarted
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Create PostgreSQL user
      postgresql_user:
        name: "{{ postgresql_user }}"
        password: "{{ postgresql_password }}"
        state: present
      become_user: postgres
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Create PostgreSQL database
      postgresql_db:
        name: "{{ postgresql_db }}"
        owner: "{{ postgresql_user }}"
        state: present
      become_user: postgres
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Grant all privileges on database to user
      postgresql_privs:
        database: "{{ postgresql_db }}"
        privs: ALL
        type: database
        role: "{{ postgresql_user }}"
        state: present
      become_user: postgres
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Secure PostgreSQL authentication after user creation
      lineinfile:
        path: "{{ postgresql_data_dir }}/pg_hba.conf"
        regexp: "^local\\s+all\\s+all\\s+trust"
        line: "local   all             all                                     md5"
        backup: yes
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Add host authentication for durvalcrm database
      lineinfile:
        path: "{{ postgresql_data_dir }}/pg_hba.conf"
        line: "host    {{ postgresql_db }}    {{ postgresql_user }}    0.0.0.0/0    md5"
        insertafter: "^local\\s+all\\s+all"
        backup: yes
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Restart PostgreSQL to apply security settings
      systemd:
        name: "{{ postgresql_service_name }}"
        state: restarted
      when: postgresql_installed != 'none'
      ignore_errors: yes

    - name: Display PostgreSQL installation status
      debug:
        msg: |
          PostgreSQL Installation Status: {{ postgresql_installed }}
          {% if postgresql_installed == 'version' %}
          ✓ PostgreSQL {{ postgresql_version }} installed from official repository
          {% elif postgresql_installed == 'alt' %}
          ✓ PostgreSQL {{ postgresql_version }} installed with alternative package names
          {% elif postgresql_installed == 'default' %}
          ✓ PostgreSQL installed from default OS repositories
          {% else %}
          ⚠ PostgreSQL installation failed - continuing without database
          ⚠ Manual PostgreSQL installation may be required
          {% endif %}

    # Keycloak 26 Standalone Installation
    # Nginx Installation and Configuration for Development Environment
    - name: Install Nginx for vm-dev environment
      package:
        name: nginx
        state: present
      when: "'vm-dev' in group_names"

    - name: Copy development Nginx configuration
      copy:
        src: ../files/nginx/nginx-dev.conf
        dest: /etc/nginx/nginx.conf
        backup: yes
      when: "'vm-dev' in group_names"
      notify: restart nginx

    - name: Start and enable Nginx service
      systemd:
        name: nginx
        state: started
        enabled: yes
      when: "'vm-dev' in group_names"

    - name: Open Nginx port in firewall
      firewalld:
        port: "{{ nginx_port }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: "'vm-dev' in group_names"
      ignore_errors: yes

    - name: Create keycloak user
      user:
        name: keycloak
        home: /var/lib/keycloak
        system: yes
        shell: /bin/bash
        create_home: yes

    - name: Download Keycloak {{ keycloak_version }}
      unarchive:
        src: "https://github.com/keycloak/keycloak/releases/download/{{ keycloak_version }}/keycloak-{{ keycloak_version }}.tar.gz"
        dest: /opt
        remote_src: yes
        owner: keycloak
        group: keycloak
        creates: "/opt/keycloak-{{ keycloak_version }}"

    - name: Check if /opt/keycloak exists and is not a symlink
      stat:
        path: /opt/keycloak
      register: keycloak_dir

    - name: Remove existing keycloak directory if it exists and is not a symlink
      file:
        path: /opt/keycloak
        state: absent
      when: keycloak_dir.stat.exists and not keycloak_dir.stat.islnk

    - name: Create Keycloak symlink
      file:
        src: "/opt/keycloak-{{ keycloak_version }}"
        dest: /opt/keycloak
        state: link
        owner: keycloak
        group: keycloak

    - name: Create Keycloak data directory
      file:
        path: /opt/keycloak/data
        state: directory
        owner: keycloak
        group: keycloak
        mode: '0755'

    - name: Ensure Keycloak conf directory exists
      file:
        path: /opt/keycloak/conf
        state: directory
        owner: keycloak
        group: keycloak
        mode: '0755'

    - name: Create Keycloak admin user
      command: |
        /opt/keycloak/bin/kc.sh build
      become_user: keycloak
      args:
        creates: /opt/keycloak/data/h2/keycloakdb.mv.db

    - name: Create self-signed certificate for Keycloak (non-dev environments)
      command: |
        keytool -genkeypair -storepass password -storetype PKCS12 -keyalg RSA -keysize 2048 
        -dname "CN=20.127.155.169" -alias server -ext "SAN:c=DNS:localhost,IP:20.127.155.169,IP:127.0.0.1" 
        -keystore /opt/keycloak/conf/server.keystore
      become_user: keycloak
      args:
        creates: /opt/keycloak/conf/server.keystore
      when: use_https

    - name: Create Keycloak systemd service
      copy:
        dest: /etc/systemd/system/keycloak.service
        content: |
          [Unit]
          Description=Keycloak
          After=network.target

          [Service]
          Type=simple
          User=keycloak
          Group=keycloak
          WorkingDirectory=/opt/keycloak
          Environment="KEYCLOAK_ADMIN={{ keycloak_admin_user }}"
          Environment="KEYCLOAK_ADMIN_PASSWORD={{ keycloak_admin_password }}"
          Environment="JAVA_HOME={{ java_home_path }}"
          ExecStart=/opt/keycloak/bin/kc.sh start-dev {% if "vm-dev" in group_names %}--http-port={{ keycloak_http_port }} --http-host=0.0.0.0 --hostname-strict=false --hostname=localhost{% else %}--https-port={{ keycloak_https_port }} --http-port=8090 --hostname-strict=false --hostname=20.127.155.169{% endif %}

          TimeoutStartSec=600
          TimeoutStopSec=600
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Start and enable Keycloak service
      systemd:
        name: keycloak
        state: started
        enabled: yes

    - name: Restart Keycloak service to apply hostname configuration
      systemd:
        name: keycloak
        state: restarted

    - name: Wait for Keycloak HTTP port to be available (non-blocking fallback check)
      shell: |
        # Use timeout command to prevent hanging
        timeout 20 bash -c "echo > /dev/tcp/127.0.0.1/8090" 2>/dev/null && echo "Keycloak HTTP port 8090 is open" || echo "Keycloak HTTP port 8090 is closed or timeout"
      register: keycloak_http_check
      changed_when: false
      failed_when: false

    - name: Check if Keycloak HTTPS port is listening (non-blocking)
      shell: |
        # Use timeout command to prevent hanging
        timeout 15 bash -c "echo > /dev/tcp/127.0.0.1/{{ keycloak_https_port }}" 2>/dev/null && echo "Keycloak HTTPS port {{ keycloak_https_port }} is open" || echo "Keycloak HTTPS port {{ keycloak_https_port }} is closed or timeout"
      register: keycloak_https_check
      changed_when: false
      failed_when: false

    - name: Display Keycloak port status
      debug:
        msg: "Keycloak {{ 'HTTP' if \"vm-dev\" in group_names else 'HTTPS' }} port {{ keycloak_https_port }} status: {{ 'Available' if keycloak_https_check.stdout is defined and keycloak_https_check.stdout is search('open') else 'Not available - check Keycloak logs' }}"

    # WildFly 37 Final Installation
    - name: Create wildfly user
      user:
        name: wildfly
        home: /var/lib/wildfly
        system: yes
        shell: /bin/bash
        create_home: yes

    - name: Download WildFly {{ wildfly_version }}
      unarchive:
        src: "https://github.com/wildfly/wildfly/releases/download/{{ wildfly_version }}/wildfly-{{ wildfly_version }}.tar.gz"
        dest: /opt
        remote_src: yes
        owner: wildfly
        group: wildfly
        creates: "/opt/wildfly-{{ wildfly_version }}"

    - name: Check if /opt/wildfly exists and is not a symlink
      stat:
        path: /opt/wildfly
      register: wildfly_dir

    - name: Remove existing wildfly directory if it exists and is not a symlink
      file:
        path: /opt/wildfly
        state: absent
      when: wildfly_dir.stat.exists and not wildfly_dir.stat.islnk

    - name: Create WildFly symlink
      file:
        src: "/opt/wildfly-{{ wildfly_version }}"
        dest: /opt/wildfly
        state: link
        owner: wildfly
        group: wildfly

    - name: Create WildFly directories
      file:
        path: "{{ item }}"
        state: directory
        owner: wildfly
        group: wildfly
        mode: '0755'
      loop:
        - /var/log/wildfly
        - /var/run/wildfly
        - /opt/wildfly/standalone/deployments

    - name: Configure WildFly for HTTPS
      copy:
        dest: /opt/wildfly/bin/configure-https.cli
        owner: wildfly
        group: wildfly
        content: |
          # WildFly HTTPS Configuration Script for Rocky Linux 9
          embed-server --server-config=standalone.xml --timeout=60000
          
          # Remove existing configurations if they exist
          try
              /subsystem=undertow/server=default-server/https-listener=https:remove
          catch
              echo "HTTPS listener does not exist, continuing..."
          end-try
          
          try
              /subsystem=elytron/server-ssl-context=httpsSSC:remove
          catch
              echo "SSL context does not exist, continuing..."
          end-try
          
          try
              /subsystem=elytron/key-manager=httpsKM:remove
          catch
              echo "Key manager does not exist, continuing..."
          end-try
          
          try
              /subsystem=elytron/key-store=httpsKS:remove
          catch
              echo "Key store does not exist, continuing..."
          end-try
          
          # Create new HTTPS configuration
          /subsystem=elytron/key-store=httpsKS:add(path=application.keystore,relative-to=jboss.server.config.dir,credential-reference={clear-text=password},type=PKCS12)
          /subsystem=elytron/key-store=httpsKS:generate-key-pair(alias=server,algorithm=RSA,key-size=2048,validity=365,distinguished-name="CN=20.127.155.169,OU=DurvalCRM,O=DurvalCRM,C=BR",extensions=[{subject-alternative-names="IP:20.127.155.169,DNS:localhost,IP:127.0.0.1"}])
          
          /subsystem=elytron/key-manager=httpsKM:add(key-store=httpsKS,credential-reference={clear-text=password})
          
          /subsystem=elytron/server-ssl-context=httpsSSC:add(key-manager=httpsKM,protocols=["TLSv1.2","TLSv1.3"],cipher-suite-filter="DEFAULT")
          
          /subsystem=undertow/server=default-server/https-listener=https:add(socket-binding=https,ssl-context=httpsSSC,enabled=true)
          
          /socket-binding-group=standard-sockets/socket-binding=https:write-attribute(name=port,value={{ wildfly_https_port }})
          
          # Save configuration and exit
          :reload
          stop-embedded-server
          quit

    - name: Check if WildFly HTTPS keystore exists
      stat:
        path: /opt/wildfly/standalone/configuration/application.keystore
      register: wildfly_keystore

    - name: Ensure WildFly configuration directory is writable
      file:
        path: /opt/wildfly/standalone/configuration
        state: directory
        owner: wildfly
        group: wildfly
        mode: '0755'

    - name: Check WildFly CLI tool accessibility
      stat:
        path: /opt/wildfly/bin/jboss-cli.sh
      register: wildfly_cli_check

    - name: Make WildFly CLI executable
      file:
        path: /opt/wildfly/bin/jboss-cli.sh
        mode: '0755'
      when: wildfly_cli_check.stat.exists

    - name: Generate WildFly HTTPS keystore (non-dev environments)
      shell: |
        export JAVA_HOME={{ java_home_path }}
        cd /opt/wildfly
        timeout 300 /opt/wildfly/bin/jboss-cli.sh --file=/opt/wildfly/bin/configure-https.cli
      become_user: wildfly
      when: use_https and not wildfly_keystore.stat.exists
      register: wildfly_keystore_result
      failed_when: false
      async: 600
      poll: 5

    - name: Alternative keystore generation if CLI fails (non-dev environments)
      shell: |
        export JAVA_HOME={{ java_home_path }}
        cd /opt/wildfly/standalone/configuration
        keytool -genkeypair -alias server -keyalg RSA -keysize 2048 -validity 365 \
          -keystore application.keystore -storepass password -keypass password \
          -dname "CN=20.127.155.169,OU=DurvalCRM,O=DurvalCRM,C=BR" \
          -ext SAN=dns:localhost,ip:20.127.155.169,ip:127.0.0.1
      become_user: wildfly
      when: use_https and not wildfly_keystore.stat.exists and (wildfly_keystore_result.failed or wildfly_keystore_result.rc != 0)
      ignore_errors: yes

    - name: Verify keystore was created (non-dev environments)
      stat:
        path: /opt/wildfly/standalone/configuration/application.keystore
      when: use_https
      register: wildfly_keystore_verify

    - name: Display keystore generation status (non-dev environments)
      debug:
        msg: |
          WildFly HTTPS Keystore Status: {{ 'Created successfully' if wildfly_keystore_verify.stat.exists else 'Failed to create' }}
          {% if not wildfly_keystore_verify.stat.exists %}
          ⚠️ HTTPS may not work properly for WildFly
          {% endif %}
      when: use_https

    - name: Create WildFly systemd service
      copy:
        dest: /etc/systemd/system/wildfly.service
        content: |
          [Unit]
          Description=WildFly Application Server
          After=network.target

          [Service]
          Type=simple
          User=wildfly
          Group=wildfly
          WorkingDirectory=/opt/wildfly
          Environment="JAVA_HOME={{ java_home_path }}"
          Environment="JBOSS_HOME=/opt/wildfly"
          Environment="WILDFLY_HOME=/opt/wildfly"
          ExecStart=/opt/wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0{% if use_https %} -Djboss.https.port={{ wildfly_https_port }}{% endif %}

          TimeoutStartSec=600
          TimeoutStopSec=600
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Start and enable WildFly service
      systemd:
        name: wildfly
        state: started
        enabled: yes

    - name: Restart WildFly service to apply SSL configuration (non-dev environments)
      systemd:
        name: wildfly
        state: restarted
      when: use_https and wildfly_keystore is defined and not wildfly_keystore.stat.exists
      register: wildfly_restart_result

    - name: Check WildFly service status before waiting
      systemd:
        name: wildfly
      register: wildfly_service_status

    - name: Display WildFly service status
      debug:
        msg: |
          WildFly Service Status: {{ wildfly_service_status.status.ActiveState }}
          SubState: {{ wildfly_service_status.status.SubState }}
          Main PID: {{ wildfly_service_status.status.MainPID if wildfly_service_status.status.MainPID is defined else 'None' }}

    - name: Wait for WildFly management interface to be ready (non-blocking extended check)
      shell: |
        # Use timeout command to prevent hanging
        timeout 60 bash -c "echo > /dev/tcp/127.0.0.1/9990" 2>/dev/null && echo "WildFly management port 9990 is ready" || echo "WildFly management port 9990 not ready or timeout"
      register: wildfly_port_check
      changed_when: false
      failed_when: false

    - name: Alternative check for WildFly process if port check fails
      shell: |
        ps aux | grep wildfly | grep -v grep || echo "No WildFly process found"
        netstat -tlnp | grep 9990 || echo "Port 9990 not listening"
        systemctl status wildfly --no-pager -l || echo "Service status unavailable"
      register: wildfly_debug_info
      when: wildfly_port_check.failed

    - name: Display WildFly debugging information
      debug:
        msg: |
          WildFly Debug Information:
          {{ wildfly_debug_info.stdout_lines | join('\n') if wildfly_debug_info.stdout_lines is defined else 'No debug info available' }}
      when: wildfly_port_check.failed

    - name: Try to restart WildFly if initial start failed
      systemd:
        name: wildfly
        state: restarted
        daemon_reload: yes
      when: wildfly_port_check.failed
      register: wildfly_restart_attempt

    - name: Wait for WildFly after restart attempt (non-blocking)
      shell: |
        # Use timeout command to prevent hanging
        timeout 30 bash -c "echo > /dev/tcp/127.0.0.1/9990" 2>/dev/null && echo "WildFly management port 9990 ready after restart" || echo "WildFly management port 9990 not ready or timeout"
      when: wildfly_port_check.stdout is defined and wildfly_port_check.stdout is search("timeout|closed") and wildfly_restart_attempt.changed
      register: wildfly_port_recheck
      changed_when: false
      failed_when: false

    - name: Set WildFly ready status
      set_fact:
        wildfly_ready: "{{ (wildfly_port_check.stdout is defined and wildfly_port_check.stdout is search('ready')) or (wildfly_port_recheck is defined and wildfly_port_recheck.stdout is defined and wildfly_port_recheck.stdout is search('ready')) }}"

    - name: Create WildFly admin user
      command: |
        /opt/wildfly/bin/add-user.sh -u admin -p 'wildfly@2025' -s
      become_user: wildfly
      become: yes
      args:
        creates: /opt/wildfly/standalone/configuration/mgmt-users.properties
      register: wildfly_admin_user_created
      when: wildfly_ready
      ignore_errors: yes

    - name: Restart WildFly after admin user creation
      systemd:
        name: wildfly
        state: restarted
      when: wildfly_ready and wildfly_admin_user_created.changed
      register: wildfly_admin_restart

    - name: Wait for WildFly HTTP port to be available (non-blocking)
      shell: |
        # Use timeout command to prevent hanging
        timeout 30 bash -c "echo > /dev/tcp/127.0.0.1/8080" 2>/dev/null && echo "HTTP port 8080 is open" || echo "HTTP port 8080 is closed or timeout"
      register: wildfly_http_check
      when: wildfly_ready
      changed_when: false
      failed_when: false

    - name: Pre-check if WildFly HTTPS configuration exists (non-dev environments)
      stat:
        path: /opt/wildfly/standalone/configuration/application.keystore
      register: wildfly_https_keystore_check
      when: use_https

    - name: Debug WildFly port readiness
      debug:
        msg: |
          {% if use_https %}
          HTTPS Keystore exists: {{ wildfly_https_keystore_check.stat.exists if wildfly_https_keystore_check is defined else 'Not checked' }}
          WildFly Service Ready: {{ wildfly_ready }}
          Attempting to check HTTPS port {{ wildfly_https_port }}
          {% else %}
          Development mode: HTTP only
          WildFly Service Ready: {{ wildfly_ready }}
          Attempting to check HTTP port {{ wildfly_http_port }}
          {% endif %}

    - name: Check if WildFly HTTPS port is listening (non-blocking, non-dev environments)
      shell: |
        # Use timeout command to prevent hanging
        timeout 10 bash -c "echo > /dev/tcp/127.0.0.1/{{ wildfly_https_port }}" 2>/dev/null && echo "Port {{ wildfly_https_port }} is open" || echo "Port {{ wildfly_https_port }} is closed or timeout"
      register: wildfly_https_check
      when: use_https and wildfly_ready is defined and wildfly_ready
      changed_when: false
      failed_when: false

    - name: Check if WildFly HTTP port is listening for dev environment (non-blocking)
      shell: |
        # Use timeout command to prevent hanging
        timeout 10 bash -c "echo > /dev/tcp/127.0.0.1/{{ wildfly_http_port }}" 2>/dev/null && echo "Port {{ wildfly_http_port }} is open" || echo "Port {{ wildfly_http_port }} is closed or timeout"
      register: wildfly_http_dev_check
      when: not use_https and wildfly_ready is defined and wildfly_ready
      changed_when: false
      failed_when: false

    - name: Alternative WildFly HTTPS port check using netstat (non-dev environments)
      shell: |
        netstat -tlnp 2>/dev/null | grep :{{ wildfly_https_port }} || \
        ss -tlnp 2>/dev/null | grep :{{ wildfly_https_port }} || \
        lsof -i :{{ wildfly_https_port }} 2>/dev/null || \
        echo "Port {{ wildfly_https_port }} not found listening"
      register: wildfly_https_netstat
      when: use_https and wildfly_ready and (wildfly_https_check.failed or wildfly_https_check.skipped is defined)
      ignore_errors: yes

    - name: Check WildFly SSL configuration status
      shell: |
        if [ -f /opt/wildfly/standalone/configuration/standalone.xml ]; then
          grep -q "https-listener" /opt/wildfly/standalone/configuration/standalone.xml && \
          echo "HTTPS listener configured in standalone.xml" || \
          echo "HTTPS listener NOT configured in standalone.xml"
        else
          echo "standalone.xml not found"
        fi
      register: wildfly_ssl_config_check
      when: wildfly_ready
      ignore_errors: yes

    - name: Try to enable HTTPS listener manually if not configured
      shell: |
        export JAVA_HOME={{ java_home_path }}
        cd /opt/wildfly
        timeout 30 /opt/wildfly/bin/jboss-cli.sh --connect --command="/subsystem=undertow/server=default-server/https-listener=https:read-resource" || \
        echo "Could not verify HTTPS listener via CLI"
      become_user: wildfly
      when: wildfly_ready and (wildfly_https_check.failed or wildfly_https_netstat.stdout is search('not found'))
      register: wildfly_https_cli_check
      ignore_errors: yes

    - name: Display comprehensive WildFly status
      debug:
        msg: |
          WildFly Status Report:
          ----------------------------------------
          Environment: {{ 'Development (HTTP)' if not use_https else 'Production (HTTPS)' }}
          Service Ready: {{ wildfly_ready }}
          Management Port (9990): {{ 'Available' if wildfly_port_check.stdout is defined and wildfly_port_check.stdout is search('ready') else 'Not Available' }}
          HTTP Port (8080): {{ 'Available' if wildfly_http_check is defined and wildfly_http_check.stdout is search('open') else ('Available' if wildfly_http_dev_check is defined and wildfly_http_dev_check.stdout is search('open') else 'Not Available') }}
          {% if use_https %}
          HTTPS Port ({{ wildfly_https_port }}): {{ 'Available' if wildfly_https_check is defined and wildfly_https_check.stdout is search('open') else 'Not Available (check logs)' }}
          HTTPS Keystore: {{ 'Exists' if wildfly_https_keystore_check is defined and wildfly_https_keystore_check.stat.exists else 'Not Found' }}
          HTTPS Config: {{ wildfly_ssl_config_check.stdout if wildfly_ssl_config_check.stdout is defined else 'Not Checked' }}
          Alternative Port Check: {{ 'Port listening' if wildfly_https_netstat.stdout is defined and wildfly_https_netstat.stdout is not search('not found') else 'Port not detected' }}
          {% else %}
          HTTP Configuration: Development mode (HTTPS disabled)
          {% endif %}
          Admin User: {{ 'Created' if wildfly_admin_user_created is defined and wildfly_admin_user_created.changed else 'Not Created or Already Exists' }}
          {% if not wildfly_ready %}
          ⚠️ WildFly is not fully ready - check service logs with: journalctl -u wildfly -f
          {% endif %}
          {% if wildfly_https_check is defined and wildfly_https_check.stdout is defined and not wildfly_https_check.stdout is search('open') %}
          ⚠️ HTTPS port check failed - WildFly HTTPS may not be properly configured
          {% endif %}

    # Force SSL certificate regeneration if needed
    - name: Remove existing Keycloak keystore to force regeneration
      file:
        path: /opt/keycloak/conf/server.keystore
        state: absent
      register: keycloak_keystore_removed

    - name: Remove existing WildFly keystore to force regeneration
      file:
        path: /opt/wildfly/standalone/configuration/application.keystore
        state: absent
      register: wildfly_keystore_removed

    - name: Regenerate Keycloak certificate
      command: |
        keytool -genkeypair -storepass password -storetype PKCS12 -keyalg RSA -keysize 2048 
        -dname "CN=20.127.155.169" -alias server -ext "SAN:c=DNS:localhost,IP:20.127.155.169,IP:127.0.0.1" 
        -keystore /opt/keycloak/conf/server.keystore
      become_user: keycloak
      when: keycloak_keystore_removed.changed

    - name: Regenerate WildFly SSL configuration
      shell: |
        export JAVA_HOME={{ java_home_path }}
        cd /opt/wildfly
        timeout 300 /opt/wildfly/bin/jboss-cli.sh --file=/opt/wildfly/bin/configure-https.cli
      become_user: wildfly
      when: wildfly_keystore_removed.changed
      register: wildfly_ssl_regen_result
      failed_when: false
      async: 600
      poll: 5

    - name: Alternative SSL regeneration if CLI fails
      shell: |
        export JAVA_HOME={{ java_home_path }}
        cd /opt/wildfly/standalone/configuration
        rm -f application.keystore
        keytool -genkeypair -alias server -keyalg RSA -keysize 2048 -validity 365 \
          -keystore application.keystore -storepass password -keypass password \
          -dname "CN=20.127.155.169,OU=DurvalCRM,O=DurvalCRM,C=BR" \
          -ext SAN=dns:localhost,ip:20.127.155.169,ip:127.0.0.1
      become_user: wildfly
      when: wildfly_keystore_removed.changed and (wildfly_ssl_regen_result.failed or wildfly_ssl_regen_result.rc != 0)
      ignore_errors: yes

    - name: Restart Keycloak service after certificate regeneration
      systemd:
        name: keycloak
        state: restarted
      when: keycloak_keystore_removed.changed

    - name: Restart WildFly service after certificate regeneration
      systemd:
        name: wildfly
        state: restarted
      when: wildfly_keystore_removed.changed

    - name: Wait for services to restart
      pause:
        seconds: 15
      when: keycloak_keystore_removed.changed or wildfly_keystore_removed.changed

    - name: Final check - Keycloak HTTPS port (non-blocking)
      shell: |
        # Use timeout command to prevent hanging
        timeout 15 bash -c "echo > /dev/tcp/127.0.0.1/{{ keycloak_https_port }}" 2>/dev/null && echo "Keycloak HTTPS port {{ keycloak_https_port }} is open" || echo "Keycloak HTTPS port {{ keycloak_https_port }} is closed or timeout"
      register: final_keycloak_check
      changed_when: false
      failed_when: false

    - name: Final check - WildFly HTTPS port (non-blocking)
      shell: |
        # Use timeout command to prevent hanging
        timeout 20 bash -c "echo > /dev/tcp/127.0.0.1/{{ wildfly_https_port }}" 2>/dev/null && echo "WildFly HTTPS port {{ wildfly_https_port }} is open" || echo "WildFly HTTPS port {{ wildfly_https_port }} is closed or timeout"
      register: final_wildfly_check
      when: wildfly_ready is defined and wildfly_ready
      changed_when: false
      failed_when: false

    - name: Final check - WildFly management port (non-blocking)
      shell: |
        # Use timeout command to prevent hanging
        timeout 15 bash -c "echo > /dev/tcp/127.0.0.1/9990" 2>/dev/null && echo "WildFly management port 9990 is open" || echo "WildFly management port 9990 is closed or timeout"
      register: final_wildfly_mgmt_check
      when: wildfly_ready is defined and wildfly_ready
      changed_when: false
      failed_when: false

    - name: Final comprehensive check for WildFly HTTPS
      shell: |
        echo "=== WildFly HTTPS Diagnostic ==="
        echo "1. Checking port {{ wildfly_https_port }}:"
        netstat -tlnp 2>/dev/null | grep :{{ wildfly_https_port }} || echo "  Port not found in netstat"
        echo ""
        echo "2. Checking keystore:"
        ls -la /opt/wildfly/standalone/configuration/application.keystore 2>/dev/null || echo "  Keystore not found"
        echo ""
        echo "3. Checking HTTPS listener in config:"
        grep -c "https-listener" /opt/wildfly/standalone/configuration/standalone.xml 2>/dev/null || echo "  0"
        echo ""
        echo "4. Checking WildFly process:"
        ps aux | grep wildfly | grep -v grep | head -1 || echo "  No WildFly process"
      register: wildfly_https_diagnostic
      ignore_errors: yes

    - name: Display final service status
      debug:
        msg: |
          Final Status:
          ========================================
          Environment: {{ 'Development (HTTP-only)' if not use_https else 'Production (HTTPS)' }}
          ----------------------------------------
          {% if use_https %}
          Keycloak HTTPS ({{ keycloak_https_port }}): {{ 'Available' if final_keycloak_check.stdout is defined and final_keycloak_check.stdout is search('open') else 'Not available' }}
          WildFly HTTPS ({{ wildfly_https_port }}): {{ 'Available' if final_wildfly_check is defined and final_wildfly_check.stdout is search('open') else 'Not available' }}
          {% else %}
          Keycloak HTTP ({{ keycloak_http_port }}): {{ 'Available' if final_keycloak_check.stdout is defined and final_keycloak_check.stdout is search('open') else 'Not available' }}
          WildFly HTTP ({{ wildfly_http_port }}): {{ 'Available' if final_wildfly_check is defined and final_wildfly_check.stdout is search('open') else 'Not available' }}
          Nginx Proxy ({{ nginx_port }}): Available - routing requests to backend services
          ----------------------------------------
          Access URLs for Development:
          - Main Application: http://localhost:{{ nginx_port }}/
          - API Endpoints: http://localhost:{{ nginx_port }}/api/
          - Keycloak Admin: http://localhost:{{ nginx_port }}/auth/
          {% endif %}
          ----------------------------------------
          WildFly Service: {{ 'Ready' if wildfly_ready is defined and wildfly_ready else 'Not Ready' }}
          WildFly Management (9990): {{ 'Available' if final_wildfly_mgmt_check is defined and final_wildfly_mgmt_check.stdout is search('open') else 'Not available' }}
          ========================================
          {% if use_https and (final_wildfly_check is not defined or not final_wildfly_check.stdout is search('open')) %}
          ⚠️ WildFly HTTPS may need manual configuration:
          1. Check logs: sudo journalctl -u wildfly -n 50
          2. Verify keystore: ls -la /opt/wildfly/standalone/configuration/*.keystore
          3. Check config: grep https /opt/wildfly/standalone/configuration/standalone.xml
          4. Restart service: sudo systemctl restart wildfly
          {% endif %}

    # NGINX Installation and Configuration for Reverse Proxy
    - name: Install NGINX
      package:
        name: nginx
        state: present

    - name: Install Certbot and python3-certbot-nginx
      package:
        name:
          - certbot
          - python3-certbot-nginx
        state: present
      when: "'vm-dev' not in group_names"

    - name: Copy initial NGINX configuration (HTTP only for Let's Encrypt validation)
      copy:
        dest: /etc/nginx/conf.d/letsencrypt-temp.conf
        content: |
          server {
              listen 80;
              listen [::]:80;
              server_name durvalcrm.org www.durvalcrm.org;
              
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
              
              location / {
                  return 301 https://$host$request_uri;
              }
          }
        owner: root
        group: root
        mode: '0644'
      when: "'vm-dev' not in group_names"

    - name: Create webroot directory for Let's Encrypt
      file:
        path: /var/www/html
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: "'vm-dev' not in group_names"

    - name: Start NGINX temporarily for Let's Encrypt validation
      systemd:
        name: nginx
        state: started
        enabled: yes
      when: "'vm-dev' not in group_names"

    - name: Generate Let's Encrypt certificate for durvalcrm.org
      command: |
        certbot certonly --nginx --non-interactive --agree-tos 
        --email admin@durvalcrm.org 
        -d durvalcrm.org 
        -d www.durvalcrm.org
      args:
        creates: /etc/letsencrypt/live/durvalcrm.org/fullchain.pem
      register: certbot_result
      ignore_errors: yes
      when: "'vm-dev' not in group_names"

    - name: Check if Let's Encrypt certificate was created successfully
      stat:
        path: /etc/letsencrypt/live/durvalcrm.org/fullchain.pem
      register: letsencrypt_cert
      when: "'vm-dev' not in group_names"

    - name: Generate self-signed certificate for vm-dev
      block:
        - name: Create NGINX SSL directory
          file:
            path: /etc/nginx/ssl
            state: directory
            owner: root
            group: root
            mode: '0755'

        - name: Generate self-signed SSL certificate for vm-dev
          command: |
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 
            -keyout /etc/nginx/ssl/fallback.key 
            -out /etc/nginx/ssl/fallback.crt 
            -subj "/C=BR/ST=State/L=City/O=DurvalCRM/CN=durvalcrm.org"
          args:
            creates: /etc/nginx/ssl/fallback.crt

        - name: Set permissions for SSL certificate
          file:
            path: /etc/nginx/ssl/fallback.crt
            owner: root
            group: root
            mode: '0644'

        - name: Set permissions for SSL private key
          file:
            path: /etc/nginx/ssl/fallback.key
            owner: root
            group: root
            mode: '0600'
      when: "'vm-dev' in group_names"

    - name: Generate fallback self-signed certificate if Let's Encrypt fails (non-vm-dev)
      block:
        - name: Create NGINX SSL directory for fallback
          file:
            path: /etc/nginx/ssl
            state: directory
            owner: root
            group: root
            mode: '0755'

        - name: Generate fallback self-signed SSL certificate
          command: |
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 
            -keyout /etc/nginx/ssl/fallback.key 
            -out /etc/nginx/ssl/fallback.crt 
            -subj "/C=BR/ST=State/L=City/O=DurvalCRM/CN=durvalcrm.org"
          args:
            creates: /etc/nginx/ssl/fallback.crt

        - name: Set permissions for fallback SSL certificate
          file:
            path: /etc/nginx/ssl/fallback.crt
            owner: root
            group: root
            mode: '0644'

        - name: Set permissions for fallback SSL private key
          file:
            path: /etc/nginx/ssl/fallback.key
            owner: root
            group: root
            mode: '0600'
      when: "'vm-dev' not in group_names and (letsencrypt_cert is not defined or not letsencrypt_cert.stat.exists)"

    - name: Remove temporary NGINX configuration
      file:
        path: /etc/nginx/conf.d/letsencrypt-temp.conf
        state: absent
      when: "'vm-dev' not in group_names"

    - name: Copy NGINX configuration with Let's Encrypt certificates
      copy:
        src: ../files/nginx/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes
      when: "'vm-dev' not in group_names and letsencrypt_cert is defined and letsencrypt_cert.stat.exists"

    - name: Copy NGINX configuration with self-signed certificates for vm-dev
      copy:
        src: ../files/nginx/nginx-simple.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes
      when: "'vm-dev' in group_names"

    - name: Copy fallback NGINX configuration with self-signed certificates (non-vm-dev)
      copy:
        src: ../files/nginx/nginx-simple.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes
      when: "'vm-dev' not in group_names and (letsencrypt_cert is not defined or not letsencrypt_cert.stat.exists)"

    - name: Setup auto-renewal for Let's Encrypt certificates
      cron:
        name: "Let's Encrypt renewal"
        minute: "0"
        hour: "2"
        job: "/usr/bin/certbot renew --quiet --post-hook 'systemctl reload nginx'"
        state: present
      when: "'vm-dev' not in group_names and letsencrypt_cert.stat.exists"

    - name: Display certificate status for vm-dev
      debug:
        msg: |
          ✓ Self-signed certificates generated for vm-dev environment
          ✓ Using fallback certificates for development
      when: "'vm-dev' in group_names"

    - name: Display certificate status for production
      debug:
        msg: |
          {% if letsencrypt_cert is defined and letsencrypt_cert.stat.exists %}
          ✓ Let's Encrypt certificates successfully installed for durvalcrm.org and www.durvalcrm.org
          ✓ Auto-renewal configured via cron job
          {% else %}
          ⚠ Let's Encrypt certificate generation failed
          ⚠ Using self-signed fallback certificates
          ⚠ To retry Let's Encrypt later, ensure DNS A records for durvalcrm.org and www.durvalcrm.org point to 20.127.155.169
          {% endif %}
      when: "'vm-dev' not in group_names"

    - name: Test NGINX configuration
      command: nginx -t
      register: nginx_config_test
      ignore_errors: yes

    - name: Display NGINX configuration test result
      debug:
        msg: "{{ nginx_config_test.stdout_lines }}"
      when: nginx_config_test is defined

    - name: Start and enable NGINX service
      systemd:
        name: nginx
        state: started
        enabled: yes
      when: nginx_config_test.rc == 0

    - name: Reload NGINX to apply configuration
      systemd:
        name: nginx
        state: reloaded
      when: nginx_config_test.rc == 0

    # Firewall Configuration for Rocky Linux 9 (using firewalld)
    - name: Ensure firewalld is installed and started
      package:
        name: firewalld
        state: present
      when: ansible_os_family == "RedHat"

    - name: Start and enable firewalld service
      systemd:
        name: firewalld
        state: started
        enabled: yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Allow HTTP port 80 through firewalld
      firewalld:
        port: "80/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Allow HTTPS port 443 through firewalld
      firewalld:
        port: "443/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Allow WildFly HTTPS port 8443 through firewalld
      firewalld:
        port: "8443/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Allow Keycloak HTTPS port 9443 through firewalld
      firewalld:
        port: "9443/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Allow SSH port 22 through firewalld (ensure access)
      firewalld:
        service: ssh
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    # Development environment HTTP ports
    - name: Allow WildFly HTTP port 8080 through firewalld (vm-dev only)
      firewalld:
        port: "8080/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat" and "vm-dev" in group_names
      ignore_errors: yes

    - name: Allow Keycloak HTTP port 8090 through firewalld (vm-dev only)
      firewalld:
        port: "8090/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat" and "vm-dev" in group_names
      ignore_errors: yes

    - name: Reload firewalld to apply all changes
      systemd:
        name: firewalld
        state: reloaded
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    # Display final access information

    - name: Display system and services information for Rocky Linux 9
      debug:
        msg: |
          ========================================
          Rocky Linux 9 DurvalCRM Environment Setup Complete
          ----------------------------------------
          System Information:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Architecture: {{ ansible_architecture }}
          - Python: {{ ansible_python_version }}
          
          Services are accessible at:
          ----------------------------------------
          Frontend Application (CRM):
          - URL: https://durvalcrm.org/crm
          - Direct: https://20.127.155.169:8443/durvalcrm-frontend
          
          Keycloak Admin Console:
          - URL: https://durvalcrm.org/admin
          - Direct: https://20.127.155.169:9443
          
          Rocky Linux 9 Specific Configuration:
          ----------------------------------------
          - Package Manager: DNF (with YUM fallback)
          - Firewall: firewalld (ports 80, 443, 8443, 9443, SSH opened)
          - SELinux: Set to permissive mode for development
          - Timezone: UTC (server recommended)
          - Java Home: {{ java_home_path if java_home_path is defined else 'Auto-detected' }}
          - PostgreSQL Status: {{ postgresql_installed if postgresql_installed is defined else 'Not determined' }}
          - PowerTools/CRB Repository: Enabled
          - System Tuning: Applied (swappiness, network params)
          
          Network Configuration:
          ----------------------------------------
          Note: Ensure DNS A records point to 20.127.155.169:
          - durvalcrm.org → 20.127.155.169
          - www.durvalcrm.org → 20.127.155.169
          
          For local testing, add to /etc/hosts:
          20.127.155.169 durvalcrm.org www.durvalcrm.org
          
          Rocky Linux 9 Commands for Troubleshooting:
          - Check firewall: sudo firewall-cmd --list-all
          - Reload firewall: sudo firewall-cmd --reload
          - Check SELinux: sestatus
          - Check services: systemctl status postgresql keycloak wildfly nginx
          ========================================

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
