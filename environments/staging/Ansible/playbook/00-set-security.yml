---
- name: Set Security and Create Self-Signed Certificate
  hosts: vm-staging
  become: yes
  vars:
    cert_common_name: "{{ ansible_fqdn | default(ansible_hostname) }}"
    cert_country: "BR"
    cert_state: "Sao Paulo"
    cert_locality: "Sao Paulo"
    cert_organization: "DurvalCRM"
    cert_organizational_unit: "IT Department"
    cert_validity_days: 365
    cert_key_size: 4096
    wildfly_home: "/opt/wildfly"
    wildfly_user: "wildfly"
    wildfly_group: "wildfly"

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install OpenSSL and certificate management tools
      ansible.builtin.apt:
        name:
          - openssl
          - ca-certificates
          - ssl-cert
          - python3-cryptography
          - default-jdk
        state: present

    - name: Create certificate directory in ansible_user home
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/certificates"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Generate private key for self-signed certificate
      community.crypto.openssl_privatekey:
        path: "/home/{{ ansible_user }}/certificates/server.key"
        size: "{{ cert_key_size }}"
        type: RSA
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Generate Certificate Signing Request (CSR)
      community.crypto.openssl_csr:
        path: "/home/{{ ansible_user }}/certificates/server.csr"
        privatekey_path: "/home/{{ ansible_user }}/certificates/server.key"
        common_name: "{{ cert_common_name }}"
        country_name: "{{ cert_country }}"
        state_or_province_name: "{{ cert_state }}"
        locality_name: "{{ cert_locality }}"
        organization_name: "{{ cert_organization }}"
        organizational_unit_name: "{{ cert_organizational_unit }}"
        subject_alt_name:
          - "DNS:{{ ansible_hostname }}"
          - "DNS:{{ ansible_fqdn | default(ansible_hostname) }}"
          - "DNS:localhost"
          - "IP:{{ ansible_default_ipv4.address }}"
          - "IP:127.0.0.1"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Generate self-signed certificate
      community.crypto.x509_certificate:
        path: "/home/{{ ansible_user }}/certificates/server.crt"
        csr_path: "/home/{{ ansible_user }}/certificates/server.csr"
        privatekey_path: "/home/{{ ansible_user }}/certificates/server.key"
        provider: selfsigned
        selfsigned_not_after: "+{{ cert_validity_days }}d"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Generate PEM bundle (certificate + key)
      ansible.builtin.shell: |
        cat /home/{{ ansible_user }}/certificates/server.crt \
            /home/{{ ansible_user }}/certificates/server.key \
            > /home/{{ ansible_user }}/certificates/server.pem
      args:
        creates: "/home/{{ ansible_user }}/certificates/server.pem"

    - name: Set proper permissions for PEM bundle
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/certificates/server.pem"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Generate DH parameters for enhanced security (this may take a while)
      community.crypto.openssl_dhparam:
        path: "/home/{{ ansible_user }}/certificates/dhparam.pem"
        size: 2048
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Create PKCS12 keystore for Java applications
      community.crypto.openssl_pkcs12:
        action: export
        path: "/home/{{ ansible_user }}/certificates/keystore.p12"
        certificate_path: "/home/{{ ansible_user }}/certificates/server.crt"
        privatekey_path: "/home/{{ ansible_user }}/certificates/server.key"
        passphrase: "changeit"
        friendly_name: "durvalcrm-cert"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    # ========== NOVAS TASKS PARA WILDFLY ==========

    - name: Check if WildFly directory exists
      ansible.builtin.stat:
        path: "{{ wildfly_home }}"
      register: wildfly_dir_check

    - name: Create WildFly configuration directory if needed
      ansible.builtin.file:
        path: "{{ wildfly_home }}/standalone/configuration"
        state: directory
        owner: "{{ wildfly_user }}"
        group: "{{ wildfly_group }}"
        mode: '0755'
        recurse: yes
      when: wildfly_dir_check.stat.exists

    - name: Check if source PKCS12 keystore exists
      ansible.builtin.stat:
        path: /home/{{ ansible_user }}/certificates/keystore.p12
      register: pkcs12_keystore_check

    - name: List contents of PKCS12 keystore
      ansible.builtin.shell: |
        keytool -list -keystore /home/{{ ansible_user }}/certificates/keystore.p12 \
                -storepass changeit -storetype PKCS12 -v | grep -A 5 "Alias name"
      register: pkcs12_contents
      when: pkcs12_keystore_check.stat.exists
      failed_when: false
      changed_when: false

    - name: Display PKCS12 keystore contents
      ansible.builtin.debug:
        msg: 
          - "PKCS12 keystore exists: {{ pkcs12_keystore_check.stat.exists }}"
          - "Contents: {{ pkcs12_contents.stdout if pkcs12_contents is defined else 'Could not read' }}"
      when: pkcs12_keystore_check.stat.exists

    - name: Create JKS keystore for WildFly management realm
      ansible.builtin.shell: |
        keytool -importkeystore \
          -srckeystore /home/{{ ansible_user }}/certificates/keystore.p12 \
          -srcstoretype PKCS12 \
          -srcstorepass changeit \
          -destkeystore {{ wildfly_home }}/certificates/management-staging.keystore \
          -deststoretype JKS \
          -deststorepass staging123 \
          -destkeypass staging123 \
          -srcalias durvalcrm-cert \
          -destalias staging-management \
          -noprompt 2>&1
      when: wildfly_dir_check.stat.exists and pkcs12_keystore_check.stat.exists
      register: management_keystore_result
      failed_when: false

    - name: Display management keystore creation result
      ansible.builtin.debug:
        msg:
          - "Management keystore creation return code: {{ management_keystore_result.rc | default('not executed') }}"
          - "Output: {{ management_keystore_result.stdout | default('') }}"
          - "Error: {{ management_keystore_result.stderr | default('') }}"
      when: management_keystore_result is defined

    - name: Create JKS keystore for WildFly application realm
      ansible.builtin.shell: |
        keytool -importkeystore \
          -srckeystore /home/{{ ansible_user }}/certificates/keystore.p12 \
          -srcstoretype PKCS12 \
          -srcstorepass changeit \
          -destkeystore {{ wildfly_home }}/certificates/application-staging.keystore \
          -deststoretype JKS \
          -deststorepass staging123 \
          -destkeypass staging123 \
          -srcalias durvalcrm-cert \
          -destalias staging-app \
          -noprompt 2>&1
      when: wildfly_dir_check.stat.exists and pkcs12_keystore_check.stat.exists
      register: application_keystore_result
      failed_when: false

    - name: Display application keystore creation result
      ansible.builtin.debug:
        msg:
          - "Application keystore creation return code: {{ application_keystore_result.rc | default('not executed') }}"
          - "Output: {{ application_keystore_result.stdout | default('') }}"
          - "Error: {{ application_keystore_result.stderr | default('') }}"
      when: application_keystore_result is defined

    - name: Set proper ownership and permissions for management keystore
      ansible.builtin.file:
        path: "{{ wildfly_home }}/certificates/management-staging.keystore"
        owner: "{{ wildfly_user }}"
        group: "{{ wildfly_group }}"
        mode: '0600'
      when: wildfly_dir_check.stat.exists and management_keystore_result.rc == 0

    - name: Set proper ownership and permissions for application keystore
      ansible.builtin.file:
        path: "{{ wildfly_home }}/certificates/application-staging.keystore"
        owner: "{{ wildfly_user }}"
        group: "{{ wildfly_group }}"
        mode: '0600'
      when: wildfly_dir_check.stat.exists and application_keystore_result.rc == 0

    - name: Verify management keystore was created successfully
      ansible.builtin.shell: |
        keytool -list -keystore {{ wildfly_home }}/certificates/management-staging.keystore \
                -storepass staging123 -alias staging-management
      register: management_keystore_verify
      when: wildfly_dir_check.stat.exists and management_keystore_result.rc == 0
      failed_when: false
      changed_when: false

    - name: Verify application keystore was created successfully
      ansible.builtin.shell: |
        keytool -list -keystore {{ wildfly_home }}/certificates/application-staging.keystore \
                -storepass staging123 -alias staging-app
      register: application_keystore_verify
      when: wildfly_dir_check.stat.exists and application_keystore_result.rc == 0
      failed_when: false
      changed_when: false

    # ========== INFORMAÇÕES E VERIFICAÇÕES ==========

    - name: Generate certificate information file
      ansible.builtin.copy:
        content: |
          Certificate Information
          =======================
          Generated: {{ ansible_date_time.iso8601 }}
          Host: {{ ansible_hostname }}
          IP Address: {{ ansible_default_ipv4.address }}
          Common Name: {{ cert_common_name }}
          Validity: {{ cert_validity_days }} days
          
          Files Generated:
          - server.key: Private key (RSA {{ cert_key_size }} bits)
          - server.csr: Certificate Signing Request
          - server.crt: Self-signed certificate
          - server.pem: Combined certificate and key (for Nginx, HAProxy, etc.)
          - dhparam.pem: Diffie-Hellman parameters
          - keystore.p12: PKCS12 keystore for Java applications (password: changeit)
          
          WildFly Keystores (if WildFly is installed):
          - management-staging.keystore: JKS keystore for WildFly management (password: staging123, alias: staging-management)
          - application-staging.keystore: JKS keystore for WildFly application (password: staging123, alias: staging-app)
          
          Certificate Details:
          --------------------
          Country: {{ cert_country }}
          State: {{ cert_state }}
          Locality: {{ cert_locality }}
          Organization: {{ cert_organization }}
          Organizational Unit: {{ cert_organizational_unit }}
          
          Subject Alternative Names:
          - DNS:{{ ansible_hostname }}
          - DNS:{{ ansible_fqdn | default(ansible_hostname) }}
          - DNS:localhost
          - IP:{{ ansible_default_ipv4.address }}
          - IP:127.0.0.1
          
          Usage Examples:
          ---------------
          Nginx:
            ssl_certificate /home/{{ ansible_user }}/certificates/server.crt;
            ssl_certificate_key /home/{{ ansible_user }}/certificates/server.key;
            ssl_dhparam /home/{{ ansible_user }}/certificates/dhparam.pem;
          
          Apache:
            SSLCertificateFile /home/{{ ansible_user }}/certificates/server.crt
            SSLCertificateKeyFile /home/{{ ansible_user }}/certificates/server.key
          
          Java/Keycloak/WildFly:
            Use keystore.p12 with password: changeit
            OR use WildFly-specific JKS keystores with password: staging123
        dest: "/home/{{ ansible_user }}/certificates/README.txt"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Display certificate information
      ansible.builtin.debug:
        msg:
          - "Self-signed certificate has been successfully created"
          - "Certificate location: /home/{{ ansible_user }}/certificates/"
          - "Certificate files:"
          - "  - server.crt: Certificate file"
          - "  - server.key: Private key file"
          - "  - server.pem: Combined certificate and key"
          - "  - dhparam.pem: DH parameters"
          - "  - keystore.p12: Java keystore (password: changeit)"
          - "Certificate is valid for {{ cert_validity_days }} days"
          - "Certificate CN: {{ cert_common_name }}"

    - name: Display WildFly keystore information
      ansible.builtin.debug:
        msg:
          - "WildFly keystores created successfully:"
          - "  - Management keystore: {{ wildfly_home }}/certificates/management-staging.keystore"
          - "  - Application keystore: {{ wildfly_home }}/certificates/application-staging.keystore"
          - "  - Password: staging123"
          - "  - Management alias: staging-management"
          - "  - Application alias: staging-app"
      when: wildfly_dir_check.stat.exists and management_keystore_result.rc == 0 and application_keystore_result.rc == 0

    - name: Display WildFly keystore warnings
      ansible.builtin.debug:
        msg:
          - "WARNING: Some WildFly keystores failed to create:"
          - "  - Management keystore result: {{ 'SUCCESS' if management_keystore_result.rc == 0 else 'FAILED' }}"
          - "  - Application keystore result: {{ 'SUCCESS' if application_keystore_result.rc == 0 else 'FAILED' }}"
          - "Check the logs above for detailed error messages"
      when: wildfly_dir_check.stat.exists and (management_keystore_result.rc != 0 or application_keystore_result.rc != 0)

    - name: Display WildFly not found message
      ansible.builtin.debug:
        msg:
          - "WildFly directory not found at {{ wildfly_home }}"
          - "WildFly keystores were not created"
          - "Run this playbook again after WildFly installation"
      when: not wildfly_dir_check.stat.exists

    - name: Verify certificate validity
      ansible.builtin.shell: |
        openssl x509 -in /home/{{ ansible_user }}/certificates/server.crt -noout -dates
      register: cert_dates
      changed_when: false

    - name: Show certificate validity dates
      ansible.builtin.debug:
        msg: "{{ cert_dates.stdout_lines }}"

    - name: Test certificate chain
      ansible.builtin.shell: |
        openssl verify -CAfile /home/{{ ansible_user }}/certificates/server.crt /home/{{ ansible_user }}/certificates/server.crt
      register: cert_verify
      changed_when: false
      failed_when: false

    - name: Show certificate verification result
      ansible.builtin.debug:
        msg: "Certificate verification: {{ cert_verify.stdout }}"

    - name: Show keystore verification results
      ansible.builtin.debug:
        msg:
          - "Management keystore verification:"
          - "{{ management_keystore_verify.stdout if (management_keystore_verify is defined and management_keystore_verify.rc is defined and management_keystore_verify.rc == 0) else 'Verification failed or skipped' }}"
          - ""
          - "Application keystore verification:"
          - "{{ application_keystore_verify.stdout if (application_keystore_verify is defined and application_keystore_verify.rc is defined and application_keystore_verify.rc == 0) else 'Verification failed or skipped' }}"
      when: wildfly_dir_check.stat.exists